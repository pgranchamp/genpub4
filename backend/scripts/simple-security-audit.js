/**
 * SIMPLE SECURITY AUDIT - G√âNIE PUBLIC V4
 * Version simplifi√©e qui fonctionne imm√©diatement
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import process from 'process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: path.join(__dirname, '../.env') });

import { supabaseAdmin } from '../utils/supabaseClient.js';

console.log('üîç AUDIT S√âCURIT√â SIMPLE - G√âNIE PUBLIC V4');
console.log('==========================================');

const results = {
  timestamp: new Date().toISOString(),
  tables: {},
  summary: {},
  recommendations: []
};

// Tables √† analyser
const TABLES = ['users', 'organisations', 'projects', 'projects_aides', 'categories_aides_territoire'];

async function runSimpleAudit() {
  try {
    console.log('üì° Test de connexion Supabase...');
    
    // Test de connexion
    const { data: _testData, error: testError } = await supabaseAdmin
      .from('users')
      .select('count')
      .limit(1);
      
    if (testError) {
      console.log('‚ùå Erreur de connexion:', testError.message);
      process.exit(1);
    }
    
    console.log('‚úÖ Connexion Supabase OK');
    
    // Test de chaque table
    console.log('\nüìã Test d\'acc√®s aux tables...');
    
    for (const tableName of TABLES) {
      console.log(`\nüîç Test table: ${tableName}`);
      
      try {
        // Test SELECT
        const selectStart = Date.now();
        const { data: selectData, error: selectError } = await supabaseAdmin
          .from(tableName)
          .select('*')
          .limit(3);
        const selectTime = Date.now() - selectStart;
        
        // Test COUNT
        const countStart = Date.now();
        const { count, error: countError } = await supabaseAdmin
          .from(tableName)
          .select('*', { count: 'exact', head: true });
        const countTime = Date.now() - countStart;
        
        results.tables[tableName] = {
          exists: true,
          select: {
            success: !selectError,
            error: selectError?.message || null,
            responseTime: selectTime,
            sampleRecords: selectData?.length || 0
          },
          count: {
            success: !countError,
            error: countError?.message || null,
            responseTime: countTime,
            totalRecords: count || 0
          }
        };
        
        // Analyse du statut
        if (!selectError && !countError) {
          console.log(`  ‚úÖ Acc√®s autoris√© - ${count || 0} enregistrements`);
          results.tables[tableName].status = 'ACCESSIBLE';
          results.tables[tableName].rlsStatus = 'D√âSACTIV√â';
        } else if (selectError?.message?.includes('RLS') || selectError?.message?.includes('policy')) {
          console.log(`  üîí Acc√®s bloqu√© par RLS (s√©curis√©)`);
          results.tables[tableName].status = 'RLS_PROTECTED';
          results.tables[tableName].rlsStatus = 'ACTIV√â';
        } else {
          console.log(`  ‚ùå Erreur: ${selectError?.message || countError?.message}`);
          results.tables[tableName].status = 'ERROR';
          results.tables[tableName].rlsStatus = 'INCONNU';
        }
        
      } catch (error) {
        console.log(`  ‚ùå Exception: ${error.message}`);
        results.tables[tableName] = {
          exists: false,
          error: error.message,
          status: 'ERROR'
        };
      }
    }
    
    // Analyse des r√©sultats
    console.log('\nüìä ANALYSE DES R√âSULTATS');
    console.log('========================');
    
    const accessibleTables = Object.entries(results.tables).filter(([, info]) => info.status === 'ACCESSIBLE');
    const protectedTables = Object.entries(results.tables).filter(([, info]) => info.status === 'RLS_PROTECTED');
    const errorTables = Object.entries(results.tables).filter(([, info]) => info.status === 'ERROR');
    
    console.log(`üìã Tables analys√©es: ${TABLES.length}`);
    console.log(`‚úÖ Tables accessibles: ${accessibleTables.length}`);
    console.log(`üîí Tables prot√©g√©es par RLS: ${protectedTables.length}`);
    console.log(`‚ùå Tables en erreur: ${errorTables.length}`);
    
    results.summary = {
      totalTables: TABLES.length,
      accessibleTables: accessibleTables.length,
      protectedTables: protectedTables.length,
      errorTables: errorTables.length
    };
    
    // G√©n√©ration des recommandations
    console.log('\nüí° RECOMMANDATIONS');
    console.log('==================');
    
    if (accessibleTables.length > 0) {
      console.log('\nüö® CRITIQUE - Tables sans protection RLS:');
      accessibleTables.forEach(([tableName]) => {
        console.log(`  ‚ùå ${tableName}: RLS d√©sactiv√©`);
        results.recommendations.push({
          priority: 'CRITIQUE',
          table: tableName,
          issue: 'RLS d√©sactiv√©',
          action: `Activer RLS: ALTER TABLE ${tableName} ENABLE ROW LEVEL SECURITY;`,
          risk: 'Acc√®s non contr√¥l√© aux donn√©es'
        });
      });
    }
    
    if (protectedTables.length > 0) {
      console.log('\n‚úÖ Tables correctement prot√©g√©es:');
      protectedTables.forEach(([tableName]) => {
        console.log(`  üîí ${tableName}: RLS activ√©`);
      });
    }
    
    if (errorTables.length > 0) {
      console.log('\n‚ö†Ô∏è  Tables √† v√©rifier:');
      errorTables.forEach(([tableName, info]) => {
        console.log(`  ‚ùì ${tableName}: ${info.error}`);
        results.recommendations.push({
          priority: 'MOYENNE',
          table: tableName,
          issue: 'Erreur d\'acc√®s',
          action: 'V√©rifier l\'existence et les permissions de la table',
          risk: 'Table potentiellement manquante ou mal configur√©e'
        });
      });
    }
    
    // √âvaluation du niveau de risque global
    let riskLevel = 'FAIBLE';
    if (accessibleTables.length >= 3) {
      riskLevel = 'CRITIQUE';
    } else if (accessibleTables.length >= 1) {
      riskLevel = '√âLEV√â';
    } else if (errorTables.length > 0) {
      riskLevel = 'MOYEN';
    }
    
    results.summary.riskLevel = riskLevel;
    
    console.log(`\nüéØ NIVEAU DE RISQUE GLOBAL: ${riskLevel}`);
    
    // Sauvegarde du rapport
    console.log('\nüíæ Sauvegarde du rapport...');
    
    const reportsDir = path.join(__dirname, '../reports');
    if (!fs.existsSync(reportsDir)) {
      fs.mkdirSync(reportsDir, { recursive: true });
    }
    
    const reportPath = path.join(reportsDir, 'simple-security-audit.json');
    fs.writeFileSync(reportPath, JSON.stringify(results, null, 2));
    
    // R√©sum√© textuel
    const summaryLines = [
      'üîç RAPPORT AUDIT S√âCURIT√â SIMPLE',
      '================================',
      `Date: ${new Date(results.timestamp).toLocaleString('fr-FR')}`,
      `Niveau de risque: ${riskLevel}`,
      '',
      'üìä R√âSUM√â:',
      `- Tables analys√©es: ${results.summary.totalTables}`,
      `- Tables accessibles (RLS d√©sactiv√©): ${results.summary.accessibleTables}`,
      `- Tables prot√©g√©es (RLS activ√©): ${results.summary.protectedTables}`,
      `- Tables en erreur: ${results.summary.errorTables}`,
      '',
      'üö® ACTIONS PRIORITAIRES:',
      ...results.recommendations
        .filter(r => r.priority === 'CRITIQUE')
        .map(r => `- ${r.table}: ${r.action}`),
      '',
      'üìã PROCHAINES √âTAPES:',
      '1. Activer RLS sur les tables non prot√©g√©es',
      '2. Cr√©er des policies appropri√©es',
      '3. Tester les permissions apr√®s activation',
      '4. Configurer le monitoring de s√©curit√©'
    ];
    
    const summaryPath = path.join(reportsDir, 'simple-security-summary.txt');
    fs.writeFileSync(summaryPath, summaryLines.join('\n'));
    
    console.log(`‚úÖ Rapport d√©taill√©: ${reportPath}`);
    console.log(`‚úÖ R√©sum√©: ${summaryPath}`);
    
    console.log('\nüéØ PROCHAINES √âTAPES RECOMMAND√âES:');
    console.log('1. Examiner les rapports g√©n√©r√©s');
    console.log('2. Activer RLS sur les tables non prot√©g√©es');
    console.log('3. Cr√©er des policies de s√©curit√© appropri√©es');
    console.log('4. Re-ex√©cuter cet audit pour v√©rifier');
    
    console.log('\n‚úÖ Audit termin√© avec succ√®s!');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'audit:', error);
    process.exit(1);
  }
}

// Ex√©cution
runSimpleAudit();
