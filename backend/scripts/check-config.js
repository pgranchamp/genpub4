/**
 * CHECK CONFIG - G√âNIE PUBLIC V4
 * Script de v√©rification de la configuration avant audit
 */

import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import path from 'path';
import fs from 'fs';
import process from 'process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Charger les variables d'environnement
dotenv.config({ path: path.join(__dirname, '../.env') });

console.log('üîß V√âRIFICATION CONFIGURATION - G√âNIE PUBLIC V4');
console.log('===============================================');

// V√©rifier l'existence du fichier .env
const envPath = path.join(__dirname, '../.env');
const envExists = fs.existsSync(envPath);

console.log(`üìÅ Fichier .env: ${envExists ? '‚úÖ Trouv√©' : '‚ùå Manquant'}`);

if (!envExists) {
  console.log('\nüö® PROBL√àME D√âTECT√â:');
  console.log('Le fichier .env est manquant dans le dossier backend/');
  console.log('\nüìã SOLUTION:');
  console.log('1. Copiez le fichier .env.example vers .env:');
  console.log('   cp .env.example .env');
  console.log('2. Modifiez .env avec vos vraies valeurs Supabase');
  console.log('3. Re-ex√©cutez: npm run security:all');
  process.exit(1);
}

// V√©rifier les variables d'environnement requises
const requiredVars = [
  'SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY'
];

console.log('\nüîë Variables d\'environnement:');
let allConfigured = true;

for (const varName of requiredVars) {
  const value = process.env[varName];
  const isConfigured = value && !value.includes('your-') && !value.includes('your_');
  
  console.log(`  ${varName}: ${isConfigured ? '‚úÖ Configur√©' : '‚ùå Manquant/Exemple'}`);
  
  if (!isConfigured) {
    allConfigured = false;
  }
}

if (!allConfigured) {
  console.log('\nüö® PROBL√àME D√âTECT√â:');
  console.log('Certaines variables d\'environnement ne sont pas configur√©es.');
  console.log('\nüìã SOLUTION:');
  console.log('1. Ouvrez le fichier backend/.env');
  console.log('2. Remplacez les valeurs d\'exemple par vos vraies valeurs Supabase:');
  console.log('   - SUPABASE_URL: URL de votre projet Supabase');
  console.log('   - SUPABASE_SERVICE_ROLE_KEY: Cl√© service_role de Supabase');
  console.log('3. Re-ex√©cutez: npm run security:all');
  process.exit(1);
}

// Test de connexion basique
console.log('\nüîå Test de connexion Supabase...');

try {
  // Import dynamique pour √©viter les erreurs si la config est mauvaise
  const { supabaseAdmin } = await import('../utils/supabaseClient.js');
  
  // Test simple
  const { data: _data, error } = await supabaseAdmin
    .from('users')
    .select('count')
    .limit(1);
    
  if (error) {
    console.log(`  ‚ùå Erreur de connexion: ${error.message}`);
    console.log('\nüìã V√âRIFICATIONS:');
    console.log('1. URL Supabase correcte?');
    console.log('2. Cl√© service_role correcte?');
    console.log('3. Acc√®s r√©seau √† Supabase autoris√©?');
  } else {
    console.log('  ‚úÖ Connexion Supabase r√©ussie');
  }
  
} catch (error) {
  console.log(`  ‚ùå Erreur de connexion: ${error.message}`);
}

console.log('\n‚úÖ V√©rification termin√©e!');
console.log('\nSi tout est ‚úÖ, vous pouvez maintenant ex√©cuter:');
console.log('  npm run security:all');
