/**
 * Service OpenAI
 * Gère les opérations liées à l'API OpenAI pour l'analyse de texte
 */

// URL de l'API OpenAI
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

// Récupérer la clé API depuis les variables d'environnement
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

/**
 * Analyse sémantique d'un projet
 * @param {string} projectDescription - La description du projet
 * @returns {Promise<Object>} Les résultats de l'analyse
 * @throws {Error} Si l'analyse échoue
 */
export const reformulateProjectV2 = async (projectDescription) => {
  try {
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Tu es un expert en financement public. À partir de la description suivante, reformule professionnellement le projet pour une lecture institutionnelle, puis identifie les groupes thématiques d'aides publiques les plus pertinents et propose des mots-clés de recherche.

Voici la liste des groupes disponibles :
- Culture et identité collective / patrimoine / sports
- Développement économique / production et consommation
- Eau et milieux aquatiques
- Énergies / Déchets
- Fonctions support
- Mobilité / transports
- Nature / environnement
- Solidarités / lien social
- Urbanisme / logement / aménagement

Description brute du projet :
${projectDescription}

Réponds avec un objet JSON :
{
  "title": "Titre du projet",
  "reformulation": "Texte professionnel et clair",
  "keywords": ["mot-clé1", "mot-clé2", ...],
  "groupes_pertinents": ["Groupe1", "Groupe2", ...]
}`
          }
        ],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Format de réponse OpenAI invalide');
    }
    
    // Extraire et parser la réponse JSON
    let parsedResponse;
    try {
      const content = data.choices[0].message.content;
      // Extraire le JSON si la réponse contient du texte avant ou après
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      parsedResponse = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('Erreur lors du parsing de la réponse JSON:', parseError);
      // Fallback si le parsing échoue
      return {
        title: "Titre non disponible",
        reformulation: data.choices[0].message.content,
        keywords: [],
        groupes_pertinents: []
      };
    }
    
    return parsedResponse;
  } catch (error) {
    console.error('Erreur lors de l\'analyse sémantique:', error);
    throw error;
  }
};

/**
 * Filtre les aides en fonction de leur pertinence pour un projet
 * @param {string} reformulation - La reformulation du projet
 * @param {Array<string>|string} keywords - Les mots-clés du projet
 * @param {Array<Object>} aides - Les aides à filtrer
 * @returns {Promise<Array<Object>>} Les aides filtrées
 * @throws {Error} Si le filtrage échoue
 */
export const filterAidesFromAPI = async (reformulation, keywords, aides) => {
  try {
    // Vérifier et logger les IDs des aides
    console.log('Vérification des IDs des aides avant filtrage:');
    aides.slice(0, 10).forEach((aide, index) => {
      console.log(`Aide #${index} - ID: ${aide.id || 'MANQUANT'}, Nom: ${aide.name || 'Non défini'}`);
    });
    
    // Compter les aides sans ID
    const aidesWithoutId = aides.filter(aide => !aide.id).length;
    if (aidesWithoutId > 0) {
      console.warn(`ATTENTION - ${aidesWithoutId} aides n'ont pas d'ID sur un total de ${aides.length}`);
    } else {
      console.log(`Toutes les aides (${aides.length}) ont un ID valide`);
    }
    
    // Limiter le nombre d'aides pour éviter de dépasser la limite de tokens
    const MAX_AIDES = 20;
    const aidesToProcess = aides.slice(0, MAX_AIDES);
    
    // Préparation des données d'aides pour le prompt - version simplifiée
    const aidesData = aidesToProcess.map(aide => ({
      id: aide.id,
      titre: aide.name || aide.titre || 'Aide sans titre',
      description: aide.description ? aide.description.substring(0, 200) + '...' : 'Pas de description disponible',
      publics_vises: Array.isArray(aide.targeted_audiences) ? aide.targeted_audiences.slice(0, 3) : [],
      url: aide.url || '',
      backer: aide.backer || null // Ajout de l'organisme porteur
    }));
    
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo-16k",
        messages: [
          {
            role: "system",
            content: `Voici un projet reformulé avec ses mots-clés. Voici une liste d'aides publiques récupérées via Aides-Territoires. Identifie les aides réellement pertinentes pour ce projet.

Projet :
${reformulation}

Mots-clés :
${Array.isArray(keywords) ? keywords.join(', ') : keywords}

Aides récupérées :
${JSON.stringify(aidesData)}

Pour chaque aide :
- Classe-la selon sa pertinence : "forte", "moyenne", "faible"
- Justifie cette évaluation brièvement
- Vérifie que l'aide contient au moins un des mots-clés (ou leurs synonymes)

Réponds avec un tableau JSON.`
          }
        ],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Format de réponse OpenAI invalide');
    }
    
    // Extraire et parser la réponse JSON
    let parsedResponse;
    try {
      const content = data.choices[0].message.content;
      // Extraire le JSON si la réponse contient du texte avant ou après
      const jsonMatch = content.match(/\[[\s\S]*\]/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      parsedResponse = JSON.parse(jsonString);
      
      // Enrichir les résultats avec les données complètes des aides originales
      parsedResponse = parsedResponse.map(aideEvaluee => {
        // Trouver l'aide originale correspondante
        const aideOriginale = aidesToProcess.find(a => a.id === aideEvaluee.id);
        
        if (aideOriginale) {
          // Conserver toutes les propriétés de l'aide originale et ajouter l'évaluation
          return {
            ...aideOriginale,
            pertinence: aideEvaluee.pertinence || 'moyenne',
            justification: aideEvaluee.justification || '',
            mots_cles_matches: aideEvaluee.mots_cles_matches || []
          };
        }
        
        // Si l'aide n'est pas trouvée (cas rare), retourner l'aide évaluée telle quelle
        return aideEvaluee;
      });
      
      console.log(`${parsedResponse.length} aides filtrées et traitées avec succès`);
    } catch (parseError) {
      console.error('Erreur lors du parsing de la réponse JSON:', parseError);
      return [];
    }
    
    return parsedResponse;
  } catch (error) {
    console.error('Erreur lors du filtrage des aides:', error);
    return [];
  }
};

/**
 * Génère des mots-clés à partir d'une description de projet
 * @param {string} projectDescription - La description du projet
 * @returns {Promise<Array<string>>} Les mots-clés générés
 * @throws {Error} Si la génération échoue
 */
export const generateKeywords = async (projectDescription) => {
  try {
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "Tu es un expert en analyse de projets publics. Extrais 5 à 8 mots-clés pertinents de la description du projet. Réponds uniquement avec les mots-clés séparés par des virgules, sans phrases ni explications."
          },
          {
            role: "user",
            content: projectDescription
          }
        ],
        temperature: 0.5
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Format de réponse OpenAI invalide');
    }
    
    // Traitement de la réponse pour obtenir une liste de mots-clés
    const keywordsText = data.choices[0].message.content;
    const keywords = keywordsText.split(',').map(keyword => keyword.trim()).filter(keyword => keyword);
    
    return keywords;
  } catch (error) {
    console.error('Erreur lors de la génération des mots-clés:', error);
    
    // Gestion des différents types d'erreurs
    if (error.message.includes('API key')) {
      throw new Error('Problème avec la clé API OpenAI. Veuillez vérifier votre configuration.');
    } else if (error.message.includes('429')) {
      throw new Error('Limite de requêtes OpenAI atteinte. Veuillez réessayer plus tard.');
    } else if (error.message.includes('5')) {
      throw new Error('Problème avec les serveurs OpenAI. Veuillez réessayer plus tard.');
    } else {
      throw new Error('Impossible de générer des mots-clés. Veuillez réessayer.');
    }
  }
};

/**
 * Fonction complète d'analyse de projet et recherche d'aides
 * @param {Object} project - Le projet à analyser
 * @returns {Promise<Object>} Les résultats de l'analyse
 * @throws {Error} Si l'analyse échoue
 */
export const analyserProjetEtAides = async (project) => {
  try {
    console.log('Début de l\'analyse du projet:', project.id);
    
    // Étape 1: Analyse sémantique via OpenAI
    const analyseSemantique = await reformulateProjectV2(project.description);
    
    // Mise à jour du projet avec les résultats de l'analyse
    const projetMisAJour = {
      ...project,
      title: analyseSemantique.title,
      reformulation: analyseSemantique.reformulation,
      keywords: analyseSemantique.keywords,
      id_categories_aides_territoire: analyseSemantique.groupes_pertinents // Utiliser le nom correct de la colonne
    };
    
    return {
      projet: projetMisAJour,
      groupes_pertinents: analyseSemantique.groupes_pertinents
    };
    
  } catch (error) {
    console.error('Erreur lors de l\'analyse du projet:', error);
    throw error;
  }
};

/**
 * Fonction de reformulation de projet (version dépréciée)
 * @param {string} projectDescription - La description du projet
 * @returns {Promise<Object>} Les résultats de la reformulation
 * @throws {Error} Si la reformulation échoue
 */
export const reformulateProject = async (projectDescription) => {
  console.warn('La fonction reformulateProject est dépréciée. Utilisez analyserProjetEtAides à la place.');
  try {
    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: `Tu es un expert en rédaction de projets publics. Analyse la description du projet fournie et réponds avec un objet JSON contenant les éléments suivants :
1. Un titre concis et accrocheur pour le projet (champ "title")
2. Une reformulation professionnelle et convaincante de la description (champ "reformulation")
3. Une liste de 5 à 8 mots-clés thématiques pertinents qui pourraient déclencher des aides publiques (champ "keywords" - tableau de chaînes)

Format de réponse attendu :
{
  "title": "Titre du projet",
  "reformulation": "Description reformulée...",
  "keywords": ["mot-clé1", "mot-clé2", "mot-clé3", "mot-clé4", "mot-clé5"]
}

Assure-toi que les mots-clés correspondent à des thématiques d'aides publiques comme : innovation, ruralité, sport, jeunesse, social, environnement, culture, éducation, santé, etc.`
          },
          {
            role: "user",
            content: projectDescription
          }
        ],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      throw new Error('Format de réponse OpenAI invalide');
    }
    
    // Extraire et parser la réponse JSON
    let parsedResponse;
    try {
      const content = data.choices[0].message.content;
      // Extraire le JSON si la réponse contient du texte avant ou après
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      parsedResponse = JSON.parse(jsonString);
    } catch (parseError) {
      console.error('Erreur lors du parsing de la réponse JSON:', parseError);
      // Fallback si le parsing échoue
      return {
        original: projectDescription,
        reformulated: data.choices[0].message.content,
        title: null,
        keywords: []
      };
    }
    
    return {
      original: projectDescription,
      reformulated: parsedResponse.reformulation || data.choices[0].message.content,
      title: parsedResponse.title || null,
      keywords: parsedResponse.keywords || []
    };
  } catch (error) {
    console.error('Erreur lors de la reformulation du projet:', error);
    
    // Gestion des différents types d'erreurs
    if (error.message.includes('API key')) {
      throw new Error('Problème avec la clé API OpenAI. Veuillez vérifier votre configuration.');
    } else if (error.message.includes('429')) {
      throw new Error('Limite de requêtes OpenAI atteinte. Veuillez réessayer plus tard.');
    } else if (error.message.includes('5')) {
      throw new Error('Problème avec les serveurs OpenAI. Veuillez réessayer plus tard.');
    } else {
      throw new Error('Impossible de reformuler le projet. Veuillez réessayer.');
    }
  }
};
