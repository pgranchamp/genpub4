/**
 * Service de gestion des aides
 * Gère les opérations liées aux aides et à l'API Aides Territoires
 */

import { API_BASE_URL, fetchWithAuth } from './httpClient';

// URL de base de l'API Aides Territoires
const AIDES_TERRITOIRES_API_BASE = 'https://aides-territoires.beta.gouv.fr/api';
const AIDES_TERRITOIRES_API = `${AIDES_TERRITOIRES_API_BASE}/aids/`;
const AIDES_TERRITOIRES_AUTH_API = `${AIDES_TERRITOIRES_API_BASE}/connexion/`;

// Variable pour stocker le token JWT d'Aides Territoires (valide 24h)
let aidesToken = null;
let aidesTokenExpiry = null;

/**
 * Obtient un token JWT valide pour l'API Aides Territoires
 * @returns {Promise<string>} Le token JWT
 * @throws {Error} Si l'obtention du token échoue
 */
export const getAidesToken = async () => {
  // Si on a déjà un token valide, on le retourne
  const now = new Date();
  if (aidesToken && aidesTokenExpiry && aidesTokenExpiry > now) {
    return aidesToken;
  }
  
  try {
    console.log('Obtention d\'un nouveau token Aides Territoires via proxy');
    const response = await fetchWithAuth(`${API_BASE_URL}/proxy/aides-territoires/token`, {
      method: 'POST'
    });
    
    if (!response.success) {
      throw new Error(response.error || 'Erreur inconnue');
    }
    
    const data = response.data;
    aidesToken = data.token;
    
    // Le token est valide pendant 24h, on le garde 23h pour être sûr
    aidesTokenExpiry = new Date();
    aidesTokenExpiry.setHours(aidesTokenExpiry.getHours() + 23);
    
    return aidesToken;
  } catch (error) {
    console.error('Erreur lors de l\'obtention du token Aides Territoires:', error);
    throw error;
  }
};

/**
 * Recherche des aides dans l'API Aides Territoires
 * @param {Object} params - Les paramètres de recherche
 * @returns {Promise<Object>} Les résultats de la recherche
 * @throws {Error} Si la recherche échoue
 */
export const searchAidesTerritoires = async (params = {}) => {
  try {
    // Construire l'URL avec les paramètres
    const url = new URL(`${API_BASE_URL}/proxy/aides-territoires/aids`);
    
    // Ajouter les paramètres à l'URL
    Object.keys(params).forEach(key => {
      // Gestion spéciale pour les tableaux (comme targeted_audiences)
      if (Array.isArray(params[key])) {
        // Pour les tableaux, on ajoute chaque valeur comme un paramètre séparé
        // Le backend s'occupera de les transmettre correctement à l'API
        params[key].forEach(value => {
          url.searchParams.append(key, value);
        });
      } else {
        url.searchParams.append(key, params[key]);
      }
    });
    
    console.log(`Appel au proxy Aides-Territoires: ${url.toString()}`);
    const response = await fetchWithAuth(url.toString());
    
    if (!response.success) {
      throw new Error(response.error || 'Erreur inconnue');
    }
    
    return response.data;
  } catch (error) {
    console.error('Erreur lors de la recherche d\'aides:', error);
    throw error;
  }
};

/**
 * Récupère les informations d'un financeur
 * @param {string|number} backerId - L'ID du financeur
 * @returns {Promise<Object|null>} Les informations du financeur ou null en cas d'erreur
 */
export const getBackerInfo = async (backerId) => {
  try {
    console.log(`Récupération des informations du financeur ${backerId}`);
    const response = await fetchWithAuth(`${API_BASE_URL}/proxy/aides-territoires/backers/${backerId}`);
    
    if (!response.success) {
      throw new Error(response.error || 'Erreur lors de la récupération du financeur');
    }
    
    return response.data;
  } catch (error) {
    console.error(`Erreur lors de la récupération du financeur ${backerId}:`, error);
    return null;
  }
};

/**
 * Enrichit une aide avec les informations du financeur
 * @param {Object} aide - L'aide à enrichir
 * @returns {Promise<Object>} L'aide enrichie
 */
export const enrichAideWithBackerInfo = async (aide) => {
  try {
    // Si l'aide a déjà un financeur, on ne fait rien
    if (aide.financeur) {
      return aide;
    }
    
    // Si l'aide a un ID de financeur
    if (aide.aid_financers) {
      let financeurId = aide.aid_financers;
      
      // Si c'est un tableau, on prend le premier
      if (Array.isArray(financeurId) && financeurId.length > 0) {
        financeurId = financeurId[0];
      }
      
      // Récupérer les informations du financeur
      if (financeurId) {
        const financeur = await getBackerInfo(financeurId);
        if (financeur) {
          return {
            ...aide,
            financeur: financeur.name,
            financeur_id: financeurId,
            financeur_slug: financeur.slug
          };
        }
      }
    }
    
    // Si on n'a pas pu récupérer le financeur, on retourne l'aide telle quelle
    return aide;
  } catch (error) {
    console.error('Erreur lors de l\'enrichissement de l\'aide avec les informations du financeur:', error);
    return aide;
  }
};

/**
 * Mapping statique des groupes aux sous-catégories
 */
export const mappingGroupesSousCategories = {
  "Culture et identité collective / patrimoine / sports": [
    { id: 104, sous_categorie: "Culture et identité collective" },
    { id: 105, sous_categorie: "Patrimoine" },
    { id: 106, sous_categorie: "Sports" }
  ],
  "Développement économique / production et consommation": [
    { id: 107, sous_categorie: "Développement économique" },
    { id: 108, sous_categorie: "Production et consommation" }
  ],
  "Eau et milieux aquatiques": [
    { id: 109, sous_categorie: "Eau" },
    { id: 110, sous_categorie: "Milieux aquatiques" }
  ],
  "Énergies / Déchets": [
    { id: 111, sous_categorie: "Énergies" },
    { id: 112, sous_categorie: "Déchets" }
  ],
  "Fonctions support": [
    { id: 113, sous_categorie: "Fonctions support" }
  ],
  "Mobilité / transports": [
    { id: 114, sous_categorie: "Mobilité" },
    { id: 115, sous_categorie: "Transports" }
  ],
  "Nature / environnement": [
    { id: 116, sous_categorie: "Nature" },
    { id: 117, sous_categorie: "Environnement" }
  ],
  "Solidarités / lien social": [
    { id: 118, sous_categorie: "Solidarités" },
    { id: 119, sous_categorie: "Lien social" }
  ],
  "Urbanisme / logement / aménagement": [
    { id: 120, sous_categorie: "Urbanisme" },
    { id: 121, sous_categorie: "Logement" },
    { id: 122, sous_categorie: "Aménagement" }
  ]
};

/**
 * Récupère les sous-catégories correspondant aux groupes
 * @param {Array<string>} groupes - Les groupes
 * @returns {Promise<Array<Object>>} Les sous-catégories
 */
export const getSousCategoriesFromGroupes = async (groupes) => {
  // Définir la constante en dehors des blocs try/catch pour qu'elle soit accessible partout
  const MAX_SOUS_CATEGORIES = 6;
  
  try {
    console.log('Groupes pour recherche de sous-catégories:', groupes);
    
    // Récupérer les sous-catégories correspondant aux groupes
    let sousCategories = [];
    groupes.forEach(groupe => {
      if (mappingGroupesSousCategories[groupe]) {
        sousCategories = [...sousCategories, ...mappingGroupesSousCategories[groupe]];
      }
    });
    
    // Limiter à 6 sous-catégories maximum
    if (sousCategories.length > MAX_SOUS_CATEGORIES) {
      console.log(`Limitation du nombre de sous-catégories de ${sousCategories.length} à ${MAX_SOUS_CATEGORIES}`);
      sousCategories = sousCategories.slice(0, MAX_SOUS_CATEGORIES);
    }
    
    console.log('Sous-catégories trouvées:', sousCategories);
    return sousCategories;
  } catch (error) {
    console.error('Erreur lors de la récupération des sous-catégories:', error);
    return [];
  }
};

/**
 * Pré-filtre les aides en fonction de leur pertinence
 * @param {Array<Object>} aides - Les aides à filtrer
 * @param {string} reformulation - La reformulation du projet
 * @param {Array<string>|string} keywords - Les mots-clés
 * @returns {Array<Object>} Les aides filtrées
 */
export const preFilterAides = (aides, reformulation, keywords) => {
  // Convertir les mots-clés en tableau si nécessaire
  const keywordsArray = Array.isArray(keywords) ? keywords : keywords.split(',').map(k => k.trim());
  
  // Extraire les mots significatifs de la reformulation (ignorer les mots vides)
  const stopWords = ['le', 'la', 'les', 'un', 'une', 'des', 'et', 'ou', 'de', 'du', 'au', 'aux', 'ce', 'ces', 'cette', 'pour', 'par', 'dans', 'sur', 'avec'];
  const reformulationWords = reformulation
    .toLowerCase()
    .split(/\s+/)
    .filter(word => word.length > 3 && !stopWords.includes(word));
  
  // Fonction pour calculer un score de pertinence amélioré
  const calculateRelevanceScore = (aide) => {
    let score = 0;
    const title = (aide.name || '').toLowerCase();
    const description = (aide.description || '').toLowerCase();
    
    // 1. Points pour les mots-clés exacts dans le titre (forte pondération)
    keywordsArray.forEach(keyword => {
      const keywordLower = keyword.toLowerCase();
      if (title.includes(keywordLower)) {
        score += 25; // Forte pondération pour les mots-clés dans le titre
      }
    });
    
    // 2. Points pour les mots-clés dans la description
    keywordsArray.forEach(keyword => {
      const keywordLower = keyword.toLowerCase();
      if (description.includes(keywordLower)) {
        score += 15;
      }
    });
    
    // 3. Points pour les mots significatifs de la reformulation dans le titre
    reformulationWords.forEach(word => {
      if (title.includes(word)) {
        score += 5;
      }
    });
    
    // 4. Points pour les mots significatifs de la reformulation dans la description
    reformulationWords.forEach(word => {
      if (description.includes(word)) {
        score += 2;
      }
    });
    
    // 5. Bonus pour les correspondances de phrases entières
    keywordsArray.forEach(keyword => {
      if (keyword.length > 10) { // Seulement pour les phrases plus longues
        const keywordLower = keyword.toLowerCase();
        // Utiliser une correspondance approximative
        if (title.includes(keywordLower.substring(0, Math.floor(keywordLower.length * 0.7)))) {
          score += 10;
        }
        if (description.includes(keywordLower.substring(0, Math.floor(keywordLower.length * 0.7)))) {
          score += 5;
        }
      }
    });
    
    // 6. Pénalité pour les aides très courtes (potentiellement moins informatives)
    if (description.length < 100) {
      score -= 10;
    }
    
    return score;
  };
  
  // Calculer le score pour chaque aide
  const scoredAides = aides.map(aide => ({
    ...aide,
    relevanceScore: calculateRelevanceScore(aide)
  }));
  
  // Trier par score de pertinence
  const sortedAides = scoredAides.sort((a, b) => b.relevanceScore - a.relevanceScore);
  
  // Filtrer les aides avec un score minimum
  // Le seuil est défini dynamiquement comme un pourcentage du score maximum
  const maxScore = sortedAides.length > 0 ? sortedAides[0].relevanceScore : 0;
  const threshold = Math.max(10, maxScore * 0.3); // Au moins 30% du score max ou 10 points
  
  return sortedAides.filter(aide => aide.relevanceScore >= threshold);
};

/**
 * Détermine le nombre maximum d'aides à envoyer à OpenAI
 * @param {Array<Object>} aides - Les aides
 * @returns {number} Le nombre maximum d'aides
 */
export const determineMaxAidesForOpenAI = (aides) => {
  // Estimer la taille moyenne d'une aide en tokens
  const estimatedTokensPerAide = 150; // Estimation approximative
  
  // Calculer combien d'aides peuvent tenir dans le contexte
  // En gardant une marge pour le prompt et la réponse
  const maxTokens = 14000; // Pour gpt-3.5-turbo-16k, en gardant une marge
  const availableTokens = maxTokens - 1000; // Réserver 1000 tokens pour le prompt et autres
  
  const maxAides = Math.floor(availableTokens / estimatedTokensPerAide);
  
  // Limiter entre 20 et 100 aides
  return Math.min(100, Math.max(20, Math.min(maxAides, aides.length)));
};
